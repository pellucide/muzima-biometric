// FillBIR.cpp : implementation file
//

#include "stdafx.h"
#include <Biometrics/Standards/CbeffBiometricOrganizations.h>
#include <Biometrics/Standards/CbeffBdbFormatIdentifiers.h>
#include "BioAPISampleMFC.h"
#include "FillBIR.h"
#include "multiselect.h"

// CFillBIR dialog

IMPLEMENT_DYNAMIC(CFillBIR, CDialog)

CFillBIR::CFillBIR(CWnd* pParent /*=NULL*/)
	: CDialog(CFillBIR::IDD, pParent)
	, m_Name(_T(""))
	, all(FALSE)
	, m_FactorsMask(_T(""))
	, m_FormatOwner(_T(""))
	, m_FormatType(_T(""))
	, m_Type(_T(""))
	, m_ProductType(_T(""))
	, m_Quality(_T(""))
	, m_ProductID(_T(""))
{

}

CFillBIR::~CFillBIR()
{
}

void CFillBIR::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_COMBO1, m_Purpose);
	DDX_Text(pDX, IDC_EDIT5, m_Name);
	DDX_Check(pDX, IDC_CHECK1, all);
	DDX_Text(pDX, IDC_EDIT6, m_FactorsMask);
	DDX_Text(pDX, IDC_EDIT7, m_FormatOwner);
	DDX_Text(pDX, IDC_EDIT8, m_FormatType);
	DDX_Text(pDX, IDC_EDIT9, m_Type);
	DDX_Text(pDX, IDC_EDIT11, m_ProductType);
	DDX_Text(pDX, IDC_EDIT12, m_Quality);
	DDX_Text(pDX, IDC_EDIT10, m_ProductID);
}

BEGIN_MESSAGE_MAP(CFillBIR, CDialog)
	ON_BN_CLICKED(IDOK, &CFillBIR::OnBnClickedOk)
	ON_BN_CLICKED(IDC_BUTTON2, &CFillBIR::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &CFillBIR::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON5, &CFillBIR::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON4, &CFillBIR::OnBnClickedButton4)
END_MESSAGE_MAP()

// CFillBIR message handlers

void CFillBIR::OnBnClickedOk()
{
	// TODO: Add your control notification handler code here
	OnOK();
	UpdateData();
	if (!all)
		BIR.Name = m_Name;
	BIR.bir->Header.Purpose = (BioAPI_BIR_PURPOSE)m_Purpose.GetCurSel();

	BIR.bir->Header.FactorsMask = _tcstol(m_FactorsMask, 0, 0);
	BIR.bir->Header.Format.FormatOwner = (uint16_t)_tcstol(m_FormatOwner,0,0);
	BIR.bir->Header.Format.FormatType = (uint16_t)_tcstol(m_FormatType,0,0);
	BIR.bir->Header.Type = (BioAPI_BIR_DATA_TYPE)_tcstol(m_Type,0,0);
	BIR.bir->Header.ProductID.ProductOwner = (uint16_t)_tcstol(m_ProductID,0,0);
	BIR.bir->Header.ProductID.ProductType = (uint16_t)_tcstol(m_ProductType,0,0);
	BIR.bir->Header.Quality = (BioAPI_QUALITY)_tcstol(m_Quality,0,0);

	memcpy(&header, &BIR.bir->Header, sizeof(header));
}

BOOL CFillBIR::OnInitDialog()
{
	CDialog::OnInitDialog();

	m_Name = BIR.Name;

	m_Purpose.AddString(_T("BioAPI_NO_PURPOSE_AVAILABLE"));
	m_Purpose.AddString(_T("BioAPI_PURPOSE_VERIFY"));
	m_Purpose.AddString(_T("BioAPI_PURPOSE_IDENTIFY"));
	m_Purpose.AddString(_T("BioAPI_PURPOSE_ENROLL"));
	m_Purpose.AddString(_T("BioAPI_PURPOSE_ENROLL_FOR_VERIFICATION_ONLY"));
	m_Purpose.AddString(_T("BioAPI_PURPOSE_ENROLL_FOR_IDENTIFICATION_ONLY"));
	m_Purpose.AddString(_T("BioAPI_PURPOSE_AUDIT"));
	m_Purpose.SetCurSel(BIR.bir->Header.Purpose);

	m_FactorsMask.Format(_T("0x%04X"), BIR.bir->Header.FactorsMask);
	m_FormatOwner.Format(_T("0x%04X"), (int)BIR.bir->Header.Format.FormatOwner);
	m_FormatType.Format(_T("0x%04X"), (int)BIR.bir->Header.Format.FormatType);
	m_Type.Format(_T("0x%04X"), (int)BIR.bir->Header.Type);
	m_ProductID.Format(_T("0x%04X"), (int)BIR.bir->Header.ProductID.ProductOwner);
	m_ProductType.Format(_T("0x%04X"), (int)BIR.bir->Header.ProductID.ProductType);
	m_Quality.Format(_T("%i"), (int)BIR.bir->Header.Quality);

	UpdateData(0);

	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

void CFillBIR::OnBnClickedButton2()
{
	// factors mask
	CMultiselect select(this);

	select.items[BioAPI_NO_TYPE_AVAILABLE] = _T("BioAPI_NO_TYPE_AVAILABLE");
	select.items[BioAPI_TYPE_MULTIPLE] = _T("BioAPI_TYPE_MULTIPLE");
	select.items[BioAPI_TYPE_FACIAL_FEATURES] = _T("BioAPI_TYPE_FACIAL_FEATURES");
	select.items[BioAPI_TYPE_VOICE] = _T("BioAPI_TYPE_VOICE");
	select.items[BioAPI_TYPE_FINGERPRINT] = _T("BioAPI_TYPE_FINGERPRINT");
	select.items[BioAPI_TYPE_IRIS] = _T("BioAPI_TYPE_IRIS");
	select.items[BioAPI_TYPE_RETINA] = _T("BioAPI_TYPE_RETINA");
	select.items[BioAPI_TYPE_HAND_GEOMETRY] = _T("BioAPI_TYPE_HAND_GEOMETRY");
	select.items[BioAPI_TYPE_SIGNATURE_DYNAMICS] = _T("BioAPI_TYPE_SIGNATURE_DYNAMICS");
	select.items[BioAPI_TYPE_KEYSTOKE_DYNAMICS] = _T("BioAPI_TYPE_KEYSTOKE_DYNAMICS");
	select.items[BioAPI_TYPE_LIP_MOVEMENT] = _T("BioAPI_TYPE_LIP_MOVEMENT");
	select.items[BioAPI_TYPE_THERMAL_FACE_IMAGE] = _T("BioAPI_TYPE_THERMAL_FACE_IMAGE");
	select.items[BioAPI_TYPE_THERMAL_HAND_IMAGE] = _T("BioAPI_TYPE_THERMAL_HAND_IMAGE");
	select.items[BioAPI_TYPE_GAIT] = _T("BioAPI_TYPE_GAIT");
	select.items[BioAPI_TYPE_OTHER] = _T("BioAPI_TYPE_OTHER");
	select.items[BioAPI_TYPE_PASSWORD] = _T("BioAPI_TYPE_PASSWORD");

	select.sel = _tcstol(m_FactorsMask,0,0);

	if (select.DoModal() == IDOK)
	{
		m_FactorsMask.Format(_T("0x%04X"), select.sel);
		UpdateData(0);
	}
}

void CFillBIR::OnBnClickedButton3()
{
	// type
	CMultiselect select(this);

	select.items[BioAPI_BIR_DATA_TYPE_RAW] = _T("BioAPI_BIR_DATA_TYPE_RAW");
	select.items[BioAPI_BIR_DATA_TYPE_INTERMEDIATE] = _T("BioAPI_BIR_DATA_TYPE_INTERMEDIATE");
	select.items[BioAPI_BIR_DATA_TYPE_PROCESSED] = _T("BioAPI_BIR_DATA_TYPE_PROCESSED");
	select.items[BioAPI_BIR_DATA_TYPE_ENCRYPTED] = _T("BioAPI_BIR_DATA_TYPE_ENCRYPTED");
	select.items[BioAPI_BIR_DATA_TYPE_SIGNED] = _T("BioAPI_BIR_DATA_TYPE_SIGNED");
	select.items[BioAPI_BIR_INDEX_PRESENT] = _T("BioAPI_BIR_INDEX_PRESENT");

	select.sel = _tcstol(m_Type,0,0);
	select.multiple = false;

	if (select.DoModal() == IDOK)
	{
		m_Type.Format(_T("0x%04X"), select.sel);
		UpdateData(0);
	}
}

void CFillBIR::OnBnClickedButton5()
{
	// format owner
	CMultiselect select(this);

	select.items[CBEFF_BO_SAFLINK] = _T("CBEFF_BO_SAFLINK");
	select.items[CBEFF_BO_BIOSCRYPT] = _T("CBEFF_BO_BIOSCRYPT");
	select.items[CBEFF_BO_IDENTIX] = _T("CBEFF_BO_IDENTIX");
	select.items[CBEFF_BO_INFINEON_TECHNOLOGIES] = _T("CBEFF_BO_INFINEON_TECHNOLOGIES");
	select.items[CBEFF_BO_IRIDIAN_TECHNOLOGIES] = _T("CBEFF_BO_IRIDIAN_TECHNOLOGIES");
	select.items[CBEFF_BO_VERIDICOM] = _T("CBEFF_BO_VERIDICOM");
	select.items[CBEFF_BO_CYBER_SIGN] = _T("CBEFF_BO_CYBER_SIGN");
	select.items[CBEFF_BO_ECRYP] = _T("CBEFF_BO_ECRYP");
	select.items[CBEFF_BO_FINGERPRINT_CARDS] = _T("CBEFF_BO_FINGERPRINT_CARDS");
	select.items[CBEFF_BO_SECUGEN] = _T("CBEFF_BO_SECUGEN");
	select.items[CBEFF_BO_PRECISE_BIOMETRICS] = _T("CBEFF_BO_PRECISE_BIOMETRICS");
	select.items[CBEFF_BO_IDENTIX_2] = _T("CBEFF_BO_IDENTIX_2");
	select.items[CBEFF_BO_DERMALOG_IDENTIFICATION_SYSTEMS] = _T("CBEFF_BO_DERMALOG_IDENTIFICATION_SYSTEMS");
	select.items[CBEFF_BO_LOGICO_SMARTCARD_SOLUTIONS] = _T("CBEFF_BO_LOGICO_SMARTCARD_SOLUTIONS");
	select.items[CBEFF_BO_NIST] = _T("CBEFF_BO_NIST");
	select.items[CBEFF_BO_A_4_VISION] = _T("CBEFF_BO_A_4_VISION");
	select.items[CBEFF_BO_NEC_SOLUTIONS_AMERICA] = _T("CBEFF_BO_NEC_SOLUTIONS_AMERICA");
	select.items[CBEFF_BO_UPEK] = _T("CBEFF_BO_UPEK");
	select.items[CBEFF_BO_ULTRA_SCAN] = _T("CBEFF_BO_ULTRA_SCAN");
	select.items[CBEFF_BO_AURORA_WIRELESS_TECHNOLOGIES] = _T("CBEFF_BO_AURORA_WIRELESS_TECHNOLOGIES");
	select.items[CBEFF_BO_THALES_IDENITFICATION] = _T("CBEFF_BO_THALES_IDENITFICATION");
	select.items[CBEFF_BO_INTERNATIONAL_BIOMETRIC_GROUP] = _T("CBEFF_BO_INTERNATIONAL_BIOMETRIC_GROUP");
	select.items[CBEFF_BO_COGENT_SYSTEMS] = _T("CBEFF_BO_COGENT_SYSTEMS");
	select.items[CBEFF_BO_CROSS_MATCH_TECHNOLOGIES] = _T("CBEFF_BO_CROSS_MATCH_TECHNOLOGIES");
	select.items[CBEFF_BO_RECOGNITION_SYSTEMS] = _T("CBEFF_BO_RECOGNITION_SYSTEMS");
	select.items[CBEFF_BO_GERMAN_INSTITUTE_FOR_STANDARDIZATION] = _T("CBEFF_BO_GERMAN_INSTITUTE_FOR_STANDARDIZATION");
	select.items[CBEFF_BO_INCITS_TC_M1_BIOMETRICS] = _T("CBEFF_BO_INCITS_TC_M1_BIOMETRICS");
	select.items[CBEFF_BO_NITGEN] = _T("CBEFF_BO_NITGEN");
	select.items[CBEFF_BO_SAGEM_MORPHO] = _T("CBEFF_BO_SAGEM_MORPHO");
	select.items[CBEFF_BO_BIOLINK_TECHNOLOGIES_INTERNATIONAL] = _T("CBEFF_BO_BIOLINK_TECHNOLOGIES_INTERNATIONAL");
	select.items[CBEFF_BO_ACTIVCARD] = _T("CBEFF_BO_ACTIVCARD");
	select.items[CBEFF_BO_HUMANSCAN] = _T("CBEFF_BO_HUMANSCAN");
	select.items[CBEFF_BO_ACSYS_BIOMETRICS] = _T("CBEFF_BO_ACSYS_BIOMETRICS");
	select.items[CBEFF_BO_SILEX_TECHNOLOGY] = _T("CBEFF_BO_SILEX_TECHNOLOGY");
	select.items[CBEFF_BO_BIO_WISE] = _T("CBEFF_BO_BIO_WISE");
	select.items[CBEFF_BO_LUMIDIGM] = _T("CBEFF_BO_LUMIDIGM");
	select.items[CBEFF_BO_GUARDWARE_SYSTEMS] = _T("CBEFF_BO_GUARDWARE_SYSTEMS");
	select.items[CBEFF_BO_INVESTORSHELPERS] = _T("CBEFF_BO_INVESTORSHELPERS");
	select.items[CBEFF_BO_VALIDITY] = _T("CBEFF_BO_VALIDITY");
	select.items[CBEFF_BO_VIISAGE] = _T("CBEFF_BO_VIISAGE");
	select.items[CBEFF_BO_LG_ELECTRONICS_USA] = _T("CBEFF_BO_LG_ELECTRONICS_USA");
	select.items[CBEFF_BO_STARTEK_ENGINEERING] = _T("CBEFF_BO_STARTEK_ENGINEERING");
	select.items[CBEFF_BO_JANUS_ASSOCIATES] = _T("CBEFF_BO_JANUS_ASSOCIATES");
	select.items[CBEFF_BO_OMNIPERCEPTION] = _T("CBEFF_BO_OMNIPERCEPTION");
	select.items[CBEFF_BO_MOTOROLA] = _T("CBEFF_BO_MOTOROLA");
	select.items[CBEFF_BO_CRYPTO_METRICS] = _T("CBEFF_BO_CRYPTO_METRICS");
	select.items[CBEFF_BO_BIOKEY_INTERNATIONAL] = _T("CBEFF_BO_BIOKEY_INTERNATIONAL");
	select.items[CBEFF_BO_NEUROTECHNOLOGIJA] = _T("CBEFF_BO_NEUROTECHNOLOGIJA");
	select.items[CBEFF_BO_ANTHEUS_TECHNOLOGY] = _T("CBEFF_BO_ANTHEUS_TECHNOLOGY");
	select.items[CBEFF_BO_DIGITALPERSONA] = _T("CBEFF_BO_DIGITALPERSONA");
	select.items[CBEFF_BO_XTEC] = _T("CBEFF_BO_XTEC");
	select.items[CBEFF_BO_INNOVATRICS] = _T("CBEFF_BO_INNOVATRICS");
	select.items[CBEFF_BO_EAST_SHORE_TECHNOLOGIES] = _T("CBEFF_BO_EAST_SHORE_TECHNOLOGIES");
	select.items[CBEFF_BO_HITACHI] = _T("CBEFF_BO_HITACHI");
	select.items[CBEFF_BO_123ID] = _T("CBEFF_BO_123ID");
	select.items[CBEFF_BO_BIOKEY_INTERNATIONAL_2] = _T("CBEFF_BO_BIOKEY_INTERNATIONAL_2");
	select.items[CBEFF_BO_GRIAULE_TECNOLOGIA] = _T("CBEFF_BO_GRIAULE_TECNOLOGIA");
	select.items[CBEFF_BO_AWARE] = _T("CBEFF_BO_AWARE");
	select.items[CBEFF_BO_SONDA_TECHNOLOGIES] = _T("CBEFF_BO_SONDA_TECHNOLOGIES");
	select.items[CBEFF_BO_SECURE_DESIGN] = _T("CBEFF_BO_SECURE_DESIGN");
	select.items[CBEFF_BO_VERIDT] = _T("CBEFF_BO_VERIDT");
	select.items[CBEFF_BO_ID3_SEMICONDUCTORS] = _T("CBEFF_BO_ID3_SEMICONDUCTORS");
	select.items[CBEFF_BO_GREEN_BIT_AMERICAS] = _T("CBEFF_BO_GREEN_BIT_AMERICAS");
	select.items[CBEFF_BO_ATMEL] = _T("CBEFF_BO_ATMEL");
	select.items[CBEFF_BO_AUTHEN_TEC] = _T("CBEFF_BO_AUTHEN_TEC");
	select.items[CBEFF_BO_IMAGE_WARE_SYSTEMS] = _T("CBEFF_BO_IMAGE_WARE_SYSTEMS");
	select.items[CBEFF_BO_SUPREMA] = _T("CBEFF_BO_SUPREMA");
	select.items[CBEFF_BO_BIOVISION] = _T("CBEFF_BO_BIOVISION");
	select.items[CBEFF_BO_FUJITSU] = _T("CBEFF_BO_FUJITSU");
	select.items[CBEFF_BO_AOPTIX] = _T("CBEFF_BO_AOPTIX");
	select.items[CBEFF_BO_DIGENT] = _T("CBEFF_BO_DIGENT");
	select.items[CBEFF_BO_WARWICK_WARP] = _T("CBEFF_BO_WARWICK_WARP");
	select.items[CBEFF_BO_EASTERN_GOLDEN_FINGER_TECHNOLOGY_BEIJING] = _T("CBEFF_BO_EASTERN_GOLDEN_FINGER_TECHNOLOGY_BEIJING");
	select.items[CBEFF_BO_FEDERAL_OFFICE_FOR_INFORMATION_SECURITY] = _T("CBEFF_BO_FEDERAL_OFFICE_FOR_INFORMATION_SECURITY");
	select.items[CBEFF_BO_BIOLOGICA_SISTEMAS] = _T("CBEFF_BO_BIOLOGICA_SISTEMAS");

	select.items[CBEFF_BO_ISO_IEC_JTC_1_SC_37_BIOMETRICS] = _T("CBEFF_BO_ISO_IEC_JTC_1_SC_37_BIOMETRICS");
	select.items[CBEFF_BO_ISO_IEC_JTC_1_SC_27_IT_SECURITY_TECHNIQUES] = _T("CBEFF_BO_ISO_IEC_JTC_1_SC_27_IT_SECURITY_TECHNIQUES");

	select.sel = _tcstol(m_FormatOwner,0,0);
	select.multiple = false;

	if (select.DoModal() == IDOK)
	{
		m_FormatOwner.Format(_T("0x%04X"), select.sel);
		UpdateData(0);
	}
}

void CFillBIR::OnBnClickedButton4()
{
	// format type
	CMultiselect select(this);

	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_RECORD_N] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_RECORD_N");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_RECORD_X] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_RECORD_X");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_V] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_V");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_N] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_N");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_V] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_V");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_N] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_N");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_IMAGE] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_IMAGE");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FACE_IMAGE] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FACE_IMAGE");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_IRIS_IMAGE_RECTILINEAR] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_IRIS_IMAGE_RECTILINEAR");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SPECTRAL_QUANTIZED_CO_SINUSOIDAL_TRIPLET] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SPECTRAL_QUANTIZED_CO_SINUSOIDAL_TRIPLET");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_IRIS_IMAGE_POLAR] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_IRIS_IMAGE_POLAR");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SPECTRAL_DISCRETE_FOURIER_TRANSFORM] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SPECTRAL_DISCRETE_FOURIER_TRANSFORM");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SPECTRAL_GABOR_FILTER] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SPECTRAL_GABOR_FILTER");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_SIGNATURE_SIGN_TIME_SERIES_FULL] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_SIGNATURE_SIGN_TIME_SERIES_FULL");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_SIGNATURE_SIGN_TIME_SERIES_COMPACT] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_SIGNATURE_SIGN_TIME_SERIES_COMPACT");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SKELETAL_DATA_RECORD] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SKELETAL_DATA_RECORD");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SKELETAL_DATA_CARD_NORMAL] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SKELETAL_DATA_CARD_NORMAL");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SKELETAL_DATA_CARD_COMPACT] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_PATTERN_SKELETAL_DATA_CARD_COMPACT");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_VASCULAR_IMAGE_DATA] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_VASCULAR_IMAGE_DATA");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_HAND_GEOMETRY_SILHOUETTE] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_HAND_GEOMETRY_SILHOUETTE");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_V_H] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_V_H");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_R_H] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_COMPACT_R_H");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_V_NH] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_V_NH");
	select.items[CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_R_NH] = _T("CBEFF_BDBFI_ISO_IEC_JTC_1_SC_37_BIOMETRICS_FINGER_MINUTIAE_CARD_NORMAL_R_NH");

	select.items[CBEFF_BDBFI_ID3_SEMICONDUCTORS_COMPACT_CARD_EXTENSION] = _T("CBEFF_BDBFI_ID3_SEMICONDUCTORS_COMPACT_CARD_EXTENSION");

	select.items[CBEFF_BDBFI_NEUROTECHNOLOGIJA_NLRECORD_3] = _T("CBEFF_BDBFI_NEUROTECHNOLOGIJA_NLRECORD_3");
	select.items[CBEFF_BDBFI_NEUROTECHNOLOGIJA_NTEMPLATE] = _T("CBEFF_BDBFI_NEUROTECHNOLOGIJA_NTEMPLATE");

	select.sel = _tcstol(m_FormatType,0,0);
	select.multiple = false;

	if (select.DoModal() == IDOK)
	{
		m_FormatType.Format(_T("0x%04X"), select.sel);
		UpdateData(0);
	}
}
