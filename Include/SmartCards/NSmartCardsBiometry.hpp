#ifndef N_SMART_CARDS_BIOMETRY_HPP_INCLUDED
#define N_SMART_CARDS_BIOMETRY_HPP_INCLUDED

#include <SmartCards/BerTag.hpp>
namespace Neurotec { namespace SmartCards
{
#include <SmartCards/NSmartCardsBiometry.h>
}}

N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardBiometricType)
N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardBiometricSubtype)
N_DEFINE_ENUM_TYPE_TRAITS(Neurotec::SmartCards, SCardChallengeQualifier)

namespace Neurotec { namespace SmartCards
{

#undef SCARD_BIT_TAG_ALGORITHM_REFERENCE
#undef SCARD_BIT_TAG_REFERENCE_DATA_QUALIFIER
#undef SCARD_BIT_TAG_STANDARD_DATA_OBJECTS
#undef SCARD_BIT_TAG_TAG_ALLOCATION_AUTHORITY_DATA_OBJECTS
#undef SCARD_BIT_TAG_BIOMETRIC_HEADER_TEMPLATE

#undef SCARD_BIT_BHT_TAG_PATRON_HEADER_VERSION
#undef SCARD_BIT_BHT_TAG_INDEX
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_TYPE
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_SUBTYPE
#undef SCARD_BIT_BHT_TAG_CREATION_DATE
#undef SCARD_BIT_BHT_TAG_CREATOR
#undef SCARD_BIT_BHT_TAG_VALIDITY_PERIOD
#undef SCARD_BIT_BHT_TAG_PRODUCT_IDENTIFIER
#undef SCARD_BIT_BHT_TAG_FORMAT_OWNER
#undef SCARD_BIT_BHT_TAG_FORMAT_TYPE
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_DATA
#undef SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_TEMPLATE
#undef SCARD_BIT_BHT_TAG_STANDARD_BHT
#undef SCARD_BIT_BHT_TAG_PROPRIETARY_BHT

#undef SCARD_BDT_TAG_CHALLENGE_DATA
#undef SCARD_BDT_TAG_CHALLENGE_TEMPLATE
#undef SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA
#undef SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA_OBJECTS
#undef SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA
#undef SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA_OBJECTS

#undef SCARD_BDT_CT_TAG_CHALLENGE_QUALIFIER
#undef SCARD_BDT_CT_TAG_CHALLENGE

const BerTag SCARD_BIT_TAG_ALGORITHM_REFERENCE(0x80);
const BerTag SCARD_BIT_TAG_REFERENCE_DATA_QUALIFIER(0x83);
const BerTag SCARD_BIT_TAG_STANDARD_DATA_OBJECTS(0xA0);
const BerTag SCARD_BIT_TAG_TAG_ALLOCATION_AUTHORITY_DATA_OBJECTS(0xA1);
const BerTag SCARD_BIT_TAG_BIOMETRIC_HEADER_TEMPLATE(SCARD_BIT_TAG_TAG_ALLOCATION_AUTHORITY_DATA_OBJECTS);

const BerTag SCARD_BIT_BHT_TAG_PATRON_HEADER_VERSION(0x80);
const BerTag SCARD_BIT_BHT_TAG_INDEX(0x90);
const BerTag SCARD_BIT_BHT_TAG_BIOMETRIC_TYPE(0x81);
const BerTag SCARD_BIT_BHT_TAG_BIOMETRIC_SUBTYPE(0x82);
const BerTag SCARD_BIT_BHT_TAG_CREATION_DATE(0x83);
const BerTag SCARD_BIT_BHT_TAG_CREATOR(0x84);
const BerTag SCARD_BIT_BHT_TAG_VALIDITY_PERIOD(0x85);
const BerTag SCARD_BIT_BHT_TAG_PRODUCT_IDENTIFIER(0x86);
const BerTag SCARD_BIT_BHT_TAG_FORMAT_OWNER(0x87);
const BerTag SCARD_BIT_BHT_TAG_FORMAT_TYPE(0x88);
const BerTag SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_DATA(0x91);
const BerTag SCARD_BIT_BHT_TAG_BIOMETRIC_ALGORITHM_PARAMETERS_TEMPLATE(0xB1);
const BerTag SCARD_BIT_BHT_TAG_STANDARD_BHT(0xA1);
const BerTag SCARD_BIT_BHT_TAG_PROPRIETARY_BHT(0xA2);

const BerTag SCARD_BDT_TAG_CHALLENGE_DATA(0x80);
const BerTag SCARD_BDT_TAG_CHALLENGE_TEMPLATE(0xA0);
const BerTag SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA(0x81);
const BerTag SCARD_BDT_TAG_STANDARD_BIOMETRIC_DATA_OBJECTS(0xA1);
const BerTag SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA(0x82);
const BerTag SCARD_BDT_TAG_PROPRIETARY_BIOMETRIC_DATA_OBJECTS(0xA2);

const BerTag SCARD_BDT_CT_TAG_CHALLENGE_QUALIFIER(0x90);
const BerTag SCARD_BDT_CT_TAG_CHALLENGE(0x80);

class NSmartCardsBiometry
{
	N_DECLARE_STATIC_OBJECT_CLASS(NSmartCardsBiometry)

public:
	static NType SCardBiometricTypeNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardBiometricType), true);
	}

	static NType SCardBiometricSubtypeNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardBiometricSubtype), true);
	}

	static NType SCardChallengeQualifierNativeTypeOf()
	{
		return NObject::GetObject<NType>(N_TYPE_OF(SCardChallengeQualifier), true);
	}
};

}}

#endif // !N_SMART_CARDS_BIOMETRY_HPP_INCLUDED
